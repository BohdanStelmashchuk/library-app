// <auto-generated />
using System;
using API.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240528140437_SeedMoreData")]
    partial class SeedMoreData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Core.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1948, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "george.martn@gmail.com",
                            Name = "George",
                            Surname = "Martin"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1979, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gayle.laakmann@gmail.com",
                            Name = "Gayle",
                            Surname = "Laakmann"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1965, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "simon.collins@gmail.com",
                            Name = "Simon",
                            Surname = "Collins"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1990, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sarah.brown@example.com",
                            Name = "Sarah",
                            Surname = "Brown"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1972, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "michael.jones@example.com",
                            Name = "Michael",
                            Surname = "Jones"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(1985, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "rachel.miller@example.com",
                            Name = "Rachel",
                            Surname = "Miller"
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateTime(1968, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david.martinez@example.com",
                            Name = "David",
                            Surname = "Martinez"
                        },
                        new
                        {
                            Id = 8,
                            BirthDate = new DateTime(1983, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jessica.garcia@example.com",
                            Name = "Jessica",
                            Surname = "Garcia"
                        },
                        new
                        {
                            Id = 9,
                            BirthDate = new DateTime(1977, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kevin.taylor@example.com",
                            Name = "Kevin",
                            Surname = "Taylor"
                        },
                        new
                        {
                            Id = 10,
                            BirthDate = new DateTime(1995, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "michelle.lee@example.com",
                            Name = "Michelle",
                            Surname = "Lee"
                        });
                });

            modelBuilder.Entity("API.Core.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 5)
                        .HasColumnType("decimal(10,5)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ISBN = "123456789",
                            Price = 9.99m,
                            PublisherId = 1,
                            Title = "Game of Thrones"
                        },
                        new
                        {
                            Id = 2,
                            ISBN = "GKKDF346",
                            Price = 19.99m,
                            PublisherId = 2,
                            Title = "A Feast of Dragons"
                        },
                        new
                        {
                            Id = 3,
                            ISBN = "GFOOSADOG",
                            Price = 99.99m,
                            PublisherId = 2,
                            Title = "Cracking the Coding Interview"
                        },
                        new
                        {
                            Id = 4,
                            ISBN = "GIIGHJ32d",
                            Price = 14.99m,
                            PublisherId = 1,
                            Title = "A Storm of Swords"
                        },
                        new
                        {
                            Id = 5,
                            ISBN = "ISBN-345678901",
                            Price = 11.25m,
                            PublisherId = 1,
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            Id = 6,
                            ISBN = "ISBN-876543210",
                            Price = 15.99m,
                            PublisherId = 1,
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = 7,
                            ISBN = "ISBN-567890123",
                            Price = 14.50m,
                            PublisherId = 2,
                            Title = "To the Lighthouse"
                        },
                        new
                        {
                            Id = 8,
                            ISBN = "ISBN-210987654",
                            Price = 13.25m,
                            PublisherId = 1,
                            Title = "Moby-Dick"
                        },
                        new
                        {
                            Id = 9,
                            ISBN = "ISBN-789012345",
                            Price = 16.75m,
                            PublisherId = 1,
                            Title = "The Hobbit"
                        },
                        new
                        {
                            Id = 10,
                            ISBN = "ISBN-321098765",
                            Price = 10.99m,
                            PublisherId = 2,
                            Title = "Lord of the Flies"
                        },
                        new
                        {
                            Id = 11,
                            ISBN = "ISBN-654321098",
                            Price = 9.50m,
                            PublisherId = 2,
                            Title = "Brave New World"
                        },
                        new
                        {
                            Id = 12,
                            ISBN = "ISBN-543210987",
                            Price = 8.25m,
                            PublisherId = 1,
                            Title = "Wuthering Heights"
                        },
                        new
                        {
                            Id = 13,
                            ISBN = "ISBN-432109876",
                            Price = 11.75m,
                            PublisherId = 2,
                            Title = "The Grapes of Wrath"
                        },
                        new
                        {
                            Id = 14,
                            ISBN = "ISBN-210987654",
                            Price = 14.99m,
                            PublisherId = 2,
                            Title = "One Hundred Years of Solitude"
                        },
                        new
                        {
                            Id = 15,
                            ISBN = "ISBN-789012345",
                            Price = 17.50m,
                            PublisherId = 1,
                            Title = "The Lord of the Rings"
                        },
                        new
                        {
                            Id = 16,
                            ISBN = "ISBN-543210987",
                            Price = 12.25m,
                            PublisherId = 2,
                            Title = "Animal Farm"
                        },
                        new
                        {
                            Id = 17,
                            ISBN = "ISBN-654321098",
                            Price = 15.75m,
                            PublisherId = 1,
                            Title = "Fahrenheit 451"
                        },
                        new
                        {
                            Id = 18,
                            ISBN = "ISBN-432109876",
                            Price = 10.99m,
                            PublisherId = 1,
                            Title = "Gone with the Wind"
                        },
                        new
                        {
                            Id = 19,
                            ISBN = "ISBN-321098765",
                            Price = 9.50m,
                            PublisherId = 2,
                            Title = "The Odyssey"
                        },
                        new
                        {
                            Id = 20,
                            ISBN = "ISBN-789012345",
                            Price = 14.25m,
                            PublisherId = 1,
                            Title = "Crime and Punishment"
                        },
                        new
                        {
                            Id = 21,
                            ISBN = "ISBN-123456789",
                            Price = 12.99m,
                            PublisherId = 2,
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = 22,
                            ISBN = "ISBN-987654321",
                            Price = 10.50m,
                            PublisherId = 1,
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = 23,
                            ISBN = "ISBN-234567890",
                            Price = 9.99m,
                            PublisherId = 1,
                            Title = "1984"
                        },
                        new
                        {
                            Id = 24,
                            ISBN = "ISBN-098765432",
                            Price = 8.75m,
                            PublisherId = 2,
                            Title = "Pride and Prejudice"
                        });
                });

            modelBuilder.Entity("API.Core.Entities.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("API.Core.Entities.Borrower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Borrowers");
                });

            modelBuilder.Entity("API.Core.Entities.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("BorrowerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("BorrowerId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("API.Core.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Penguin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Harper Collins"
                        });
                });

            modelBuilder.Entity("API.Core.Entities.Book", b =>
                {
                    b.HasOne("API.Core.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("API.Core.Entities.BookAuthor", b =>
                {
                    b.HasOne("API.Core.Entities.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Core.Entities.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("API.Core.Entities.Loan", b =>
                {
                    b.HasOne("API.Core.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Core.Entities.Borrower", "Borrower")
                        .WithMany("Loans")
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Borrower");
                });

            modelBuilder.Entity("API.Core.Entities.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("API.Core.Entities.Book", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("API.Core.Entities.Borrower", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("API.Core.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
